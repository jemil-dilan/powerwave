<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/add_to_cart.php">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/add_to_cart.php" />
              <option name="originalContent" value="&lt;?php&#10;// Démarrer la session si ce n'est pas déjà fait&#10;if (session_status() === PHP_SESSION_NONE) {&#10;    session_start();&#10;}&#10;&#10;require_once 'includes/config.php';&#10;require_once 'includes/functions.php';&#10;&#10;// Rate limiting check - prevent spam requests&#10;if (!isset($_SESSION['last_cart_action'])) {&#10;    $_SESSION['last_cart_action'] = 0;&#10;}&#10;if (time() - $_SESSION['last_cart_action'] &lt; 1) {&#10;    header('Content-Type: application/json');&#10;    echo json_encode(['success' =&gt; false, 'message' =&gt; 'Please wait before adding more items']);&#10;    exit;&#10;}&#10;&#10;// Handle both AJAX and traditional form submissions&#10;$isAjax = (!empty($_SERVER['HTTP_X_REQUESTED_WITH']) &amp;&amp; &#10;          strtolower($_SERVER['HTTP_X_REQUESTED_WITH']) == 'xmlhttprequest') ||&#10;          (!empty($_SERVER['CONTENT_TYPE']) &amp;&amp; &#10;          strpos($_SERVER['CONTENT_TYPE'], 'application/json') !== false);&#10;&#10;if ($isAjax) {&#10;    header('Content-Type: application/json');&#10;}&#10;&#10;if ($_SERVER['REQUEST_METHOD'] !== 'POST') {&#10;    if ($isAjax) {&#10;        echo json_encode(['success' =&gt; false, 'message' =&gt; 'Invalid request method']);&#10;    } else {&#10;        showMessage('Invalid request method', 'error');&#10;        redirect($_SERVER['HTTP_REFERER'] ?? 'products.php');&#10;    }&#10;    exit;&#10;}&#10;&#10;// CSRF Protection pour les soumissions de formulaire traditionnelles&#10;// Pour AJAX, on attend le token dans un header. Pour les formulaires, dans le POST body.&#10;if ($isAjax) {&#10;    $token = $_SERVER['HTTP_X_CSRF_TOKEN'] ?? '';&#10;} else {&#10;    $token = $_POST['csrf_token'] ?? '';&#10;}&#10;&#10;if (!validateCSRFToken($token)) {&#10;    if ($isAjax) {&#10;        echo json_encode(['success' =&gt; false, 'message' =&gt; 'Invalid security token']);&#10;    } else {&#10;        showMessage('Invalid security token. Please try again.', 'error');&#10;        redirect($_SERVER['HTTP_REFERER'] ?? 'products.php');&#10;    }&#10;    exit;&#10;}&#10;&#10;// Input validation and sanitization&#10;$productId = isset($_POST['product_id']) ? (int)$_POST['product_id'] : 0;&#10;$quantity = isset($_POST['quantity']) ? max(1, min(99, (int)$_POST['quantity'])) : 1;&#10;&#10;try {&#10;    // Enhanced validation&#10;    if ($productId &lt;= 0) {&#10;        throw new Exception('Invalid product ID');&#10;    }&#10;    &#10;    if ($quantity &lt;= 0 || $quantity &gt; 99) {&#10;        throw new Exception('Invalid quantity. Please select between 1 and 99 items');&#10;    }&#10;    &#10;    $db = Database::getInstance();&#10;    &#10;    // Get product with stock information&#10;    $product = $db-&gt;fetchOne(&#10;        &quot;SELECT p.*, b.name as brand_name, c.name as category_name &#10;         FROM products p &#10;         JOIN brands b ON p.brand_id = b.id &#10;         JOIN categories c ON p.category_id = c.id &#10;         WHERE p.id = ? AND p.status = 'active'&quot;,&#10;        [$productId]&#10;    );&#10;    &#10;    if (!$product) {&#10;        throw new Exception('Product not found or no longer available');&#10;    }&#10;    &#10;    // Stock validation&#10;    if ($product['stock_quantity'] !== null &amp;&amp; $product['stock_quantity'] &lt; $quantity) {&#10;        if ($product['stock_quantity'] &lt;= 0) {&#10;            throw new Exception('Sorry, this product is currently out of stock');&#10;        } else {&#10;            throw new Exception(&quot;Only {$product['stock_quantity']} items available in stock&quot;);&#10;        }&#10;    }&#10;    &#10;    // Check if item already in cart and validate total quantity&#10;    $userId = isLoggedIn() ? $_SESSION['user_id'] : null;&#10;    $sessionId = session_id();&#10;    &#10;    $existingCartItem = null;&#10;    if ($userId) {&#10;        $existingCartItem = $db-&gt;fetchOne(&#10;            &quot;SELECT quantity FROM cart WHERE user_id = ? AND product_id = ?&quot;,&#10;            [$userId, $productId]&#10;        );&#10;    } else {&#10;        $existingCartItem = $db-&gt;fetchOne(&#10;            &quot;SELECT quantity FROM cart WHERE session_id = ? AND product_id = ?&quot;,&#10;            [$sessionId, $productId]&#10;        );&#10;    }&#10;    &#10;    $totalQuantityInCart = $existingCartItem ? $existingCartItem['quantity'] + $quantity : $quantity;&#10;    &#10;    if ($product['stock_quantity'] !== null &amp;&amp; $product['stock_quantity'] &lt; $totalQuantityInCart) {&#10;        $available = max(0, $product['stock_quantity'] - ($existingCartItem['quantity'] ?? 0));&#10;        if ($available &lt;= 0) {&#10;            throw new Exception('You already have the maximum available quantity in your cart');&#10;        } else {&#10;            throw new Exception(&quot;You can only add {$available} more of this item (stock limit)&quot;);&#10;        }&#10;    }&#10;    &#10;    // Add to cart&#10;    $success = addToCart($productId, $quantity, $userId);&#10;    &#10;    if (!$success) {&#10;        throw new Exception('Failed to add item to cart. Please try again.');&#10;    }&#10;    &#10;    // Update rate limiting&#10;    $_SESSION['last_cart_action'] = time();&#10;    &#10;    // Get updated cart information&#10;    $cartCount = getCartItemCount($userId);&#10;    $cartTotal = getCartTotal($userId);&#10;    $cartTotalFormatted = formatPrice($cartTotal);&#10;    &#10;    // Calculate shipping and tax for display&#10;    $shipping = SHIPPING_RATE;&#10;    $tax = round($cartTotal * TAX_RATE, 2);&#10;    $grandTotal = $cartTotal + $shipping + $tax;&#10;    &#10;    $response = [&#10;        'success' =&gt; true,&#10;        'message' =&gt; $quantity == 1 &#10;            ? &quot;Added '{$product['name']}' to your cart&quot; &#10;            : &quot;Added {$quantity} x '{$product['name']}' to your cart&quot;,&#10;        'cart_count' =&gt; $cartCount,&#10;        'cart_total' =&gt; $cartTotal,&#10;        'cart_total_formatted' =&gt; $cartTotalFormatted,&#10;        'cart_subtotal' =&gt; $cartTotal,&#10;        'cart_subtotal_formatted' =&gt; $cartTotalFormatted,&#10;        'cart_shipping' =&gt; $shipping,&#10;        'cart_shipping_formatted' =&gt; formatPrice($shipping),&#10;        'cart_tax' =&gt; $tax,&#10;        'cart_tax_formatted' =&gt; formatPrice($tax),&#10;        'cart_grand_total' =&gt; $grandTotal,&#10;        'cart_grand_total_formatted' =&gt; formatPrice($grandTotal),&#10;        'product' =&gt; [&#10;            'id' =&gt; $product['id'],&#10;            'name' =&gt; $product['name'],&#10;            'price' =&gt; $product['sale_price'] ?: $product['price'],&#10;            'price_formatted' =&gt; formatPrice($product['sale_price'] ?: $product['price']),&#10;            'quantity_added' =&gt; $quantity&#10;        ]&#10;    ];&#10;    &#10;    if ($isAjax) {&#10;        echo json_encode($response);&#10;    } else {&#10;        showMessage($response['message'], 'success');&#10;        redirect($_SERVER['HTTP_REFERER'] ?? 'products.php');&#10;    }&#10;    &#10;} catch (Exception $e) {&#10;    error_log('Add to cart error: ' . $e-&gt;getMessage());&#10;    &#10;    $errorResponse = [&#10;        'success' =&gt; false, &#10;        'message' =&gt; $e-&gt;getMessage()&#10;    ];&#10;    &#10;    if ($isAjax) {&#10;        echo json_encode($errorResponse);&#10;    } else {&#10;        showMessage($errorResponse['message'], 'error');&#10;        redirect($_SERVER['HTTP_REFERER'] ?? 'products.php');&#10;    }&#10;}" />
              <option name="updatedContent" value="&lt;?php&#10;// Démarrer la session si ce n'est pas déjà fait&#10;if (session_status() === PHP_SESSION_NONE) {&#10;    session_start();&#10;}&#10;&#10;require_once 'includes/config.php';&#10;require_once 'includes/functions.php';&#10;&#10;// Rate limiting check - prevent spam requests&#10;if (!isset($_SESSION['last_cart_action'])) {&#10;    $_SESSION['last_cart_action'] = 0;&#10;}&#10;if (time() - $_SESSION['last_cart_action'] &lt; 1) {&#10;    header('Content-Type: application/json');&#10;    echo json_encode(['success' =&gt; false, 'message' =&gt; 'Please wait before adding more items']);&#10;    exit;&#10;}&#10;&#10;// Handle both AJAX and traditional form submissions&#10;$isAjax = (!empty($_SERVER['HTTP_X_REQUESTED_WITH']) &amp;&amp; &#10;          strtolower($_SERVER['HTTP_X_REQUESTED_WITH']) == 'xmlhttprequest') ||&#10;          (!empty($_SERVER['CONTENT_TYPE']) &amp;&amp; &#10;          strpos($_SERVER['CONTENT_TYPE'], 'application/json') !== false);&#10;&#10;if ($isAjax) {&#10;    header('Content-Type: application/json');&#10;}&#10;&#10;if ($_SERVER['REQUEST_METHOD'] !== 'POST') {&#10;    if ($isAjax) {&#10;        echo json_encode(['success' =&gt; false, 'message' =&gt; 'Invalid request method']);&#10;    } else {&#10;        showMessage('Invalid request method', 'error');&#10;        redirect($_SERVER['HTTP_REFERER'] ?? 'products.php');&#10;    }&#10;    exit;&#10;}&#10;&#10;// CSRF Protection pour les soumissions de formulaire traditionnelles&#10;// Pour AJAX, on attend le token dans un header. Pour les formulaires, dans le POST body.&#10;if ($isAjax) {&#10;    $token = $_SERVER['HTTP_X_CSRF_TOKEN'] ?? '';&#10;} else {&#10;    $token = $_POST['csrf_token'] ?? '';&#10;}&#10;&#10;if (!validateCSRFToken($token)) {&#10;    if ($isAjax) {&#10;        echo json_encode(['success' =&gt; false, 'message' =&gt; 'Invalid security token']);&#10;    } else {&#10;        showMessage('Invalid security token. Please try again.', 'error');&#10;        redirect($_SERVER['HTTP_REFERER'] ?? 'products.php');&#10;    }&#10;    exit;&#10;}&#10;&#10;// Input validation and sanitization&#10;$productId = isset($_POST['product_id']) ? (int)$_POST['product_id'] : 0;&#10;$quantity = isset($_POST['quantity']) ? max(1, min(99, (int)$_POST['quantity'])) : 1;&#10;&#10;try {&#10;    // Enhanced validation&#10;    if ($productId &lt;= 0) {&#10;        throw new Exception('Invalid product ID');&#10;    }&#10;    &#10;    if ($quantity &lt;= 0 || $quantity &gt; 99) {&#10;        throw new Exception('Invalid quantity. Please select between 1 and 99 items');&#10;    }&#10;    &#10;    $db = Database::getInstance();&#10;    &#10;    // Get product with stock information&#10;    $product = $db-&gt;fetchOne(&#10;        &quot;SELECT p.*, b.name as brand_name, c.name as category_name &#10;         FROM products p &#10;         JOIN brands b ON p.brand_id = b.id &#10;         JOIN categories c ON p.category_id = c.id &#10;         WHERE p.id = ? AND p.status = 'active'&quot;,&#10;        [$productId]&#10;    );&#10;    &#10;    if (!$product) {&#10;        throw new Exception('Product not found or no longer available');&#10;    }&#10;    &#10;    // Stock validation&#10;    if ($product['stock_quantity'] !== null &amp;&amp; $product['stock_quantity'] &lt; $quantity) {&#10;        if ($product['stock_quantity'] &lt;= 0) {&#10;            throw new Exception('Sorry, this product is currently out of stock');&#10;        } else {&#10;            throw new Exception(&quot;Only {$product['stock_quantity']} items available in stock&quot;);&#10;        }&#10;    }&#10;    &#10;    // Check if item already in cart and validate total quantity&#10;    $userId = isLoggedIn() ? $_SESSION['user_id'] : null;&#10;    $sessionId = session_id();&#10;    &#10;    $existingCartItem = null;&#10;    if ($userId) {&#10;        $existingCartItem = $db-&gt;fetchOne(&#10;            &quot;SELECT quantity FROM cart WHERE user_id = ? AND product_id = ?&quot;,&#10;            [$userId, $productId]&#10;        );&#10;    } else {&#10;        $existingCartItem = $db-&gt;fetchOne(&#10;            &quot;SELECT quantity FROM cart WHERE session_id = ? AND product_id = ?&quot;,&#10;            [$sessionId, $productId]&#10;        );&#10;    }&#10;    &#10;    $totalQuantityInCart = $existingCartItem ? $existingCartItem['quantity'] + $quantity : $quantity;&#10;    &#10;    if ($product['stock_quantity'] !== null &amp;&amp; $product['stock_quantity'] &lt; $totalQuantityInCart) {&#10;        $available = max(0, $product['stock_quantity'] - ($existingCartItem['quantity'] ?? 0));&#10;        if ($available &lt;= 0) {&#10;            throw new Exception('You already have the maximum available quantity in your cart');&#10;        } else {&#10;            throw new Exception(&quot;You can only add {$available} more of this item (stock limit)&quot;);&#10;        }&#10;    }&#10;    &#10;    // Add to cart&#10;    $success = addToCart($productId, $quantity, $userId);&#10;    &#10;    if (!$success) {&#10;        throw new Exception('Failed to add item to cart. Please try again.');&#10;    }&#10;    &#10;    // Update rate limiting&#10;    $_SESSION['last_cart_action'] = time();&#10;    &#10;    // Get updated cart information&#10;    $cartCount = getCartItemCount($userId);&#10;    $cartTotal = getCartTotal($userId);&#10;    $cartTotalFormatted = formatPrice($cartTotal);&#10;    &#10;    // Calculate shipping and tax for display&#10;    $shipping = SHIPPING_RATE;&#10;    $tax = round($cartTotal * TAX_RATE, 2);&#10;    $grandTotal = $cartTotal + $shipping + $tax;&#10;    &#10;    $response = [&#10;        'success' =&gt; true,&#10;        'message' =&gt; $quantity == 1 &#10;            ? &quot;Added '{$product['name']}' to your cart&quot; &#10;            : &quot;Added {$quantity} x '{$product['name']}' to your cart&quot;,&#10;        'cart_count' =&gt; $cartCount,&#10;        'cart_total' =&gt; $cartTotal,&#10;        'cart_total_formatted' =&gt; $cartTotalFormatted,&#10;        'cart_subtotal' =&gt; $cartTotal,&#10;        'cart_subtotal_formatted' =&gt; $cartTotalFormatted,&#10;        'cart_shipping' =&gt; $shipping,&#10;        'cart_shipping_formatted' =&gt; formatPrice($shipping),&#10;        'cart_tax' =&gt; $tax,&#10;        'cart_tax_formatted' =&gt; formatPrice($tax),&#10;        'cart_grand_total' =&gt; $grandTotal,&#10;        'cart_grand_total_formatted' =&gt; formatPrice($grandTotal),&#10;        'product' =&gt; [&#10;            'id' =&gt; $product['id'],&#10;            'name' =&gt; $product['name'],&#10;            'price' =&gt; $product['sale_price'] ?: $product['price'],&#10;            'price_formatted' =&gt; formatPrice($product['sale_price'] ?: $product['price']),&#10;            'quantity_added' =&gt; $quantity&#10;        ]&#10;    ];&#10;    &#10;    if ($isAjax) {&#10;        echo json_encode($response);&#10;    } else {&#10;        showMessage($response['message'], 'success');&#10;        redirect($_SERVER['HTTP_REFERER'] ?? 'products.php');&#10;    }&#10;    &#10;} catch (Exception $e) {&#10;    error_log('Add to cart error: ' . $e-&gt;getMessage());&#10;    &#10;    $errorResponse = [&#10;        'success' =&gt; false, &#10;        'message' =&gt; $e-&gt;getMessage()&#10;    ];&#10;    &#10;    if ($isAjax) {&#10;        echo json_encode($errorResponse);&#10;    } else {&#10;        showMessage($errorResponse['message'], 'error');&#10;        redirect($_SERVER['HTTP_REFERER'] ?? 'products.php');&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>